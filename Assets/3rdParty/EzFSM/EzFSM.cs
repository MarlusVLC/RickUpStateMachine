using UnityEngine;using System;using UnityEngine.Events;public class EzFSM : MonoBehaviour {		public bool ShowLabel = true;	public GUISkin LabelGUISkin;	public Vector3 LabelOffset = new Vector3 (-10, 30, 0);	// In the first run, wont remove the states from the update events	private bool _firstSwitch = true;		private int _state = -1; 	// Let's force the start state (0) to be run	public int State 	{ 		get { return _state; } 		set		{ 			if (_state == value) return;			var success = SwitchState(value);			if (success) 				_state = value;		} 	}			[Serializable]	public class IntActionsDictionary : SerializableDictionary<int, Actions> { };		//TODO: Convert to https://github.com/azixMcAze/Unity-SerializableDictionary	private IntActionsDictionary _actionsData;	//[ShowNonSerializedField]	public IntActionsDictionary ActionsData;	// {	//[Show] 	// 	get {	// 		// if (_actionsData == null)	// 			// _actionsData = new Dictionary<int, Actions>();	// 		return _actionsData; 	// 	}	// 	set { _actionsData = value; }	// }	// [ShowNonSerializedField]	public Actions _currentAction;	//[Show]	private UnityEvent _updateEvent;	private UnityEvent _fixedUpdateEvent;	public string CurrentStateName = "Default";	void Start () 	{		State = 0; 		//_previousState = 0;	}			void Update () 	{		if (_updateEvent != null)			_updateEvent.Invoke();	}	void FixedUpdate () 	{		if (_fixedUpdateEvent != null)			_fixedUpdateEvent.Invoke();	}	public void AddState(int idx, Actions actions) 	{		ActionsData.Add(idx, actions);		if (actions.OnUpdate != null)			_updateEvent = actions.OnUpdate;		if (actions.OnFixedUpdate != null)			_fixedUpdateEvent = actions.OnFixedUpdate;	}	/// <summary> Internal. You should only switch states through the 'State' property change </summary>	private bool SwitchState(int idx) 	{		Actions act;		var success = ActionsData.TryGetValue(idx, out act);		if (success) {			StopEzFSMAction (_currentAction);			StartEzFSMAction (act);		}		return success;	}	/// <summary> Runs the action and updates the current-Action pointer </summary>	void StartEzFSMAction (Actions act) 	{		if (act.OnEnter != null)			act.OnEnter.Invoke ();		if (act.OnUpdate != null)			_updateEvent = act.OnUpdate;		if (act.OnFixedUpdate != null)			_fixedUpdateEvent = act.OnFixedUpdate;		_currentAction = act;		CurrentStateName = act.Name;	}	void StopEzFSMAction (Actions act) 	{		if (!_firstSwitch) 		{			if (act.OnExit != null)				act.OnExit.Invoke ();			if (act.OnUpdate != null)				_updateEvent = null;			if (act.OnFixedUpdate != null)				_fixedUpdateEvent = null;		} else			_firstSwitch = false;	}	//EzFSMActions with no OnUpdate/OnFixedUpdate are executed only once	[Serializable]	public class Actions 	{		public string Name; //[Show]		public UnityEvent OnEnter, OnExit, OnUpdate, OnFixedUpdate;	}//	//=====////	static void StaticConstructor() {//		UnityEditor.SceneView.onSceneGUIDelegate += OnScene;//	}//	static void OnScene(UnityEditor.SceneView sceneView) {//		GUI.Label(new Rect(10,10,10,10), "This is a label");//	}}